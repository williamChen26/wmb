(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{288:function(t,a,s){t.exports=s.p+"assets/img/prototype.edb51e2b.png"},320:function(t,a,s){"use strict";s.r(a);var n=s(4),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js基础篇-深入了解原型链prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js基础篇-深入了解原型链prototype"}},[t._v("#")]),t._v(" js基础篇：深入了解原型链prototype")]),t._v(" "),a("p",[t._v("JavaScript 是一种基于原型的语言，通过一条完整的原型链来共享对象的属性和方法，本章节主要对继承和原型链解释")]),t._v(" "),a("h2",{attrs:{id:"prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" prototype")]),t._v(" "),a("p",[t._v("先简单创建个对象")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {}")]),t._v("\n")])])]),a("p",[t._v("我们知道这是一个空对象，但是尝试下面操作:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Object]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {}")]),t._v("\n")])])]),a("p",[t._v("这些都是我们在编程中经常用到得操作，不为陌生。那么有没有思考过，这些对象方法是如何来的？下面一步一步来解析。")]),t._v(" "),a("p",[a("strong",[t._v("const obj = {};")]),t._v(" 其实是 "),a("strong",[t._v("const obj = new Object();")]),t._v(" 的语法糖，使用对象构造函数来创建一个对象.每个对象都有一个名为 "),a("strong",[t._v("[[Prototype]]")]),t._v("（我们可以叫它为原型），因为这是一个内部属性，不能直接访问，所以js提供了一个 "),a("strong",[a("strong",[t._v("proto")])]),t._v(" 属性，通过__proto__来访问：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}")]),t._v("\n")])])]),a("p",[t._v("obj的__proto__指向构造函数Object的原型，当你试图访问一个对象的属性或方法时，JavaScript 会首先搜索对象本身，如果没有找到，它会搜索对象的 "),a("strong",[t._v("原型")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object.getPrototypeOf() 方法返回指定对象的原型")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ƒ () { [native code] }")]),t._v("\n")])])]),a("p",[t._v("这就解释了为什么obj会有toString方法。")]),t._v(" "),a("p",[t._v("我来看看另外一种对象类型：数组，您知道它们有许多内置方法，例如pop()和push()。创建新数组时可以访问这些方法的原因是因为您创建的任何数组都可以访问Array.prototype。")]),t._v(" "),a("p",[t._v("我们尝试创建它：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("他的原理跟obj差不多，可以编写为数组构造函数创建："),a("strong",[t._v("const arr = new Array()")]),t._v("。")]),t._v(" "),a("p",[t._v("我们再来看看它的__propto__属性：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [constructor: ƒ, concat: ƒ, pop: ƒ, push: ƒ, …]")]),t._v("\n")])])]),a("p",[t._v("我们可以看到Array.prototype的属性，都被arr的__proto__所继承了，当我们在使用arr.push()时查询到arr上没有该属性时，就会往arr.__proto__上查找，也就是Array.prototype。")]),t._v(" "),a("p",[t._v("这样看是不是简单明了？我们在来点复杂的。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1,2,3")]),t._v("\n")])])]),a("p",[t._v("js做了什么？先是发现自身没有toString，然后会在arr2._"),a("em",[t._v("proto")]),t._v("_ 上找，而arr2._"),a("em",[t._v("proto")]),t._v("_ 只有 pop、push等，没有toString，于是去 arr2._"),a("em",[t._v("proto")]),t._v("_._"),a("em",[t._v("proto")]),t._v("_ 上找，\narr2._"),a("em",[t._v("proto")]),t._v("_._"),a("em",[t._v("proto")]),t._v("_ 就是 Object.prototype！")]),t._v(" "),a("p",[t._v("这里需要理解的是：Array是构造函数，构造函数本事也是一个对象，如上述，对象会怎样？没错，凡是对象，就会有一个__proto__属性指向它的构造函数prototype。这就是传说中的原型链了，它看起来应该是：arr2 -> Array -> Object。")]),t._v(" "),a("p",[t._v("如果在查询对象 "),a("strong",[t._v("原型")]),t._v(" 后仍然没有找到匹配项，JavaScript 将检查链接对象的 "),a("strong",[t._v("原型")]),t._v("，并继续搜索，直到到达原型链的末尾。")]),t._v(" "),a("p",[t._v("在原型链的末端是Object.prototype. 所有对象都继承 的属性和方法Object。任何超出链末尾的搜索尝试都会导致null.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object.getPrototypeOf() 方法返回指定对象的原型")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:s(288),alt:"prototype",title:"Magic Gardens"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);