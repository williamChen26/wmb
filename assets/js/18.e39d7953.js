(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{318:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"算法篇-时间-空间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法篇-时间-空间复杂度"}},[t._v("#")]),t._v(" 算法篇：时间/空间复杂度")]),t._v(" "),s("p",[t._v("在算法中，时间/空间复杂度用来衡量算法的优劣的。同一个解决方案，会有多种计算方式，不同的计算方式所导致的资源消耗是会有较大的区别的，在选择方案时，"),s("code",[t._v("时间/空间复杂度")]),t._v("则是用来度量标准的方式之一。")]),t._v(" "),s("h2",{attrs:{id:"时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),s("p",[t._v("通用方法："),s("strong",[t._v("大O符号表示法")]),t._v("$$T(n) = O(f(n))$$")]),t._v(" "),s("p",[t._v("我们所说的时间复杂度实际上就是渐进时间复杂度的简称，若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数")]),t._v(" "),s("p",[t._v("简单举个例子")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("p",[t._v("通过上述公式，可得出时间复杂度为O(n)")]),t._v(" "),s("p",[t._v("那么是如何推算出来的呢？")]),t._v(" "),s("p",[t._v("我们需要量化一个时间度量的最小单位，记作：unit_time。通常一个运算、读写等操作，可以看作为一个unit_time，第一行代码对变量赋值，消耗了一个unit_time，for循环执行了n次，一个消耗了n个unit_time，所以可算得时间：$$T(n) = (n + 1) * unit_time$$  省略常数项，可得$$T(n) = O(n)$$")]),t._v(" "),s("p",[t._v("大O记号并不是用来直接计算出执行时间的，它是用来表示代码执行时间的增长变化趋势的。所以叫做渐进时间复杂度")]),t._v(" "),s("p",[t._v("开始的那个变量赋值操作，我们把他看做一个常数级的操作，对于n前面的那个2我们也把它看作为一个常数，它并不太影响整个算法的好坏，对于这样的常数项，无论有多少都可以被省略掉，所以算法最终的复杂度就是 T(n) = O(n)。")]),t._v(" "),s("p",[t._v("是不是开始熟练掌握了？我们再举个例子：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("可以看到，test函数被执行n次，而test函数内的for循环也被执行了n次，那么这个函数的时间复杂度就是: "),s("code",[t._v("O(n^2)")]),t._v("。")]),t._v(" "),s("p",[t._v("我们一般常见的时间复杂度量级有：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Constant time – O (1)")])]),t._v(" "),s("li",[s("p",[t._v("Linear time – O (n)")])]),t._v(" "),s("li",[s("p",[t._v("Logarithmic time – O (log n)")])]),t._v(" "),s("li",[s("p",[t._v("Quadratic time – O (n^2)")])]),t._v(" "),s("li",[s("p",[t._v("Cubic time – O (n^3)")])])]),t._v(" "),s("p",[t._v("想要了解"),s("a",{attrs:{href:"https://www.mygreatlearning.com/blog/why-is-time-complexity-essential/",target:"_blank",rel:"noopener noreferrer"}},[t._v("更多"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"不同情况下的时间复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同情况下的时间复杂度分析"}},[t._v("#")]),t._v(" 不同情况下的时间复杂度分析")]),t._v(" "),s("p",[t._v("用大O作为标准衡量一个算法，是最简单的，单并非最全面的，时间复杂度可以更具不同情况进一步从best case、worst case、avg case、amortized，本人了解不多，推荐一个博主的"),s("a",{attrs:{href:"https://ascend.top/2019/09/23/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E5%85%B3%E4%BA%8E-big-o-notation/",target:"_blank",rel:"noopener noreferrer"}},[t._v("博客"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"空间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),s("p",[t._v("既然时间复杂度不是用来计算程序具体耗时的，那么大家也应该明白，空间复杂度也不是用来计算程序实际占用的空间的。")]),t._v(" "),s("p",[t._v("空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用 S(n) 来定义。")])])}),[],!1,null,null,null);s.default=e.exports}}]);